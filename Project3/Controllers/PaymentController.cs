using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using PayPal.Api;
using Project3.Helpers;
using Project3.Models;
using Project3.ModelsView;
using Project3.ModelsView.Identity;
using Project3.Services;
using Serilog;
using System.Globalization;
using System.Text;

namespace Project3.Controllers
{
    [Authorize]

    public class PaymentController : Controller
    {
        private readonly CarService _carService;
        private readonly VehicleInsuranceManagementContext _context;
        private readonly BillingCalculationService _billingCalculationService;
        private readonly UserManager<ApplicationUser> _userManager;
        private readonly ILogger<EstimatesController> _logger;
        private readonly IPaymentService _paymentService;
        public PaymentController(IPaymentService paymentService, ILogger<EstimatesController> logger, VehicleInsuranceManagementContext context, BillingCalculationService billingCalculationService, UserManager<ApplicationUser> userManager, CarService carService)
        {
            _context = context;
            _billingCalculationService = billingCalculationService;
            _userManager = userManager;
            _carService = carService;
            _logger = logger;
            _paymentService = paymentService;
        }
        public IActionResult Index()
        {
            return View();
        }
        private bool BillingPolicyExists(int id)
        {
            return _context.CompanyBillingPolicies.Any(e => e.Id == id);
        }


        [Route("PaymentFail")]
        public IActionResult PaymentFail()
        {
            return View();
        }

        private async Task SavePaymentDataAsync(string paymentMethod)
        {
            // Retrieve session data
            var insuranceProductSession = HttpContext.Session.GetObject<InsuranceProductViewModel>("productSession");
            var vehicleInformationSession = HttpContext.Session.GetObject<VehicleInformationViewModel>("VehicleInformationData");
            var estimateSession = HttpContext.Session.GetObject<EstimateModelView>("EstimateData");
            var collectInfoSession = HttpContext.Session.GetObject<CollectInfoViewModel>("CollectInfoData");
            var insuranceProcessSession = HttpContext.Session.GetObject<InsuranceProcessViewModel>("InsuranceData");
            var companyBillingPolicySession = HttpContext.Session.GetObject<CompanyBillingPolicyViewModel>("companyBilling");

            // Save insuranceProduct data
            var insuranceProduct = new InsuranceProduct
            {
                PolicyTypeId = insuranceProductSession.PolicyTypeId,
                WarrantyId = insuranceProductSession.WarrantyId,
                VehicleRate = insuranceProductSession.VehicleRate,
            };
            // Save VehicleInformation data
            var vehicleInformation = new VehicleInformation
            {
                VehicleName = vehicleInformationSession.VehicleName,
                VehicleModel = vehicleInformationSession.VehicleModel,
                VehicleVersion = vehicleInformationSession.VehicleVersion,
                VehicleRate = vehicleInformationSession.VehicleRate,
                VehicleBodyNumber = vehicleInformationSession.VehicleBodyNumber,
                VehicleEngineNumber = vehicleInformationSession.VehicleEngineNumber,
                //VehicleNumber = vehicleInformationSession.VehicleNumber,
            };

            _context.VehicleInformations.Add(vehicleInformation);
            await _context.SaveChangesAsync(); // Save to get the Id

            // Use the ID generated by the database
            var vehicleId = vehicleInformation.Id;
            // Save Estimate data
            var estimate = new Estimate
            {
                CustomerId = estimateSession.CustomerId,
                EstimateNumber = estimateSession.EstimateNumber,
                CustomerName = estimateSession.CustomerName,
                CustomerPhoneNumber = estimateSession.CustomerPhoneNumber,
                VehicleName = estimateSession.VehicleName,
                VehicleModel = estimateSession.VehicleModel,
                VehicleRate = estimateSession.VehicleRate,
                PolicyTypeId = estimateSession.PolicyTypeId,
                WarrantyId = estimateSession.WarrantyId,
                VehicleId = vehicleId
            };
            _context.Estimates.Add(estimate);

            // Save CollectInfo data
            var collectInfo = new CollectInfo
            {
                DriverAge = collectInfoSession.DriverAge,
                DriverGender = collectInfoSession.DriverGender,
                DrivingHistory = collectInfoSession.DrivingHistory,
                CustomerAdd = collectInfoSession.CustomerAdd,
                Usage = collectInfoSession.Usage,
                AntiTheftDevice = collectInfoSession.AntiTheftDevice,
                MultiPolicy = collectInfoSession.MultiPolicy,
                SafeDriver = collectInfoSession.SafeDriver,
                SelectedCoverages = collectInfoSession.SelectedCoverages,
            };


            // Save InsuranceProcess data
            var insuranceProcess = new InsuranceProcess
            {
                CustomerId = insuranceProcessSession.CustomerId,
                CustomerName = insuranceProcessSession.CustomerName,
                CustomerPhoneNumber = insuranceProcessSession.CustomerPhoneNumber,
                VehicleId = vehicleId,
                PolicyTypeId = insuranceProcessSession.PolicyTypeId,
                PolicyDate = insuranceProcessSession.PolicyDate,
                WarrantyId = insuranceProcessSession.WarrantyId,
                VehicleName = vehicleInformationSession.VehicleName,
                VehicleModel = vehicleInformationSession.VehicleModel,
                VehicleVersion = vehicleInformationSession.VehicleVersion,
                VehicleRate = vehicleInformationSession.VehicleRate,
                VehicleBodyNumber = vehicleInformationSession.VehicleBodyNumber,
                VehicleEngineNumber = vehicleInformationSession.VehicleEngineNumber,
            };
            _context.InsuranceProcesses.Add(insuranceProcess);

            // Save CompanyBillingPolicy data
            var companyBillingPolicy = new CompanyBillingPolicy
            {
                CustomerId = companyBillingPolicySession.CustomerId,
                CustomerName = companyBillingPolicySession.CustomerName,
                CustomerPhoneNumber = companyBillingPolicySession.CustomerPhoneNumber,
                CustomerAddProve = companyBillingPolicySession.CustomerAddProve,
                PolicyNumber = companyBillingPolicySession.PolicyNumber,
                BillNo = companyBillingPolicySession.BillNo,
                VehicleName = companyBillingPolicySession.VehicleName,
                VehicleModel = companyBillingPolicySession.VehicleModel,
                VehicleRate = companyBillingPolicySession.VehicleRate,
                VehicleBodyNumber = companyBillingPolicySession.VehicleBodyNumber,
                VehicleEngineNumber = companyBillingPolicySession.VehicleEngineNumber,
                Date = companyBillingPolicySession.Date,
                Amount = companyBillingPolicySession.Amount,
                PaymentStatus = $"Paid With {paymentMethod}"
            };
            _context.CompanyBillingPolicies.Add(companyBillingPolicy);


            // Save all changes to the database
            await _context.SaveChangesAsync();
        }

        [Route("PaymentSuccess")]
        [HttpGet]
        public async Task<IActionResult> PaymentSuccess()
        {
            // Check for specific payment gateway indication if needed (e.g., query parameter, session state)
            var paymentMethod = Request.Query["paymentMethod"]; // Assuming a query parameter indicating payment method

            //if (paymentMethod == "MoMo")
            //{
            //    // If payment is successful, update the status of the billing policy and save data
            //    await SavePaymentDataAsync(paymentMethod);
            //}
            //else if (paymentMethod == "paypal")
            //{
            //    // Optionally handle PayPal success here if necessary
            //    // In most cases, this would have already been handled in the PaymentWithPayPal action
            //}
            if (!string.IsNullOrEmpty(paymentMethod))
            {
                // If payment is successful, update the status of the billing policy and save data
                await SavePaymentDataAsync(paymentMethod);
            }
            // Add logging to see if this action is hit
            Log.Information("PaymentSuccess endpoint hit.");

            return View();
        }




        private static readonly HttpClient client = new HttpClient();

        private async Task<string> ExecPostRequest(string url, string data)
        {
            var content = new StringContent(data, Encoding.UTF8, "application/json");
            var response = await client.PostAsync(url, content);
            return await response.Content.ReadAsStringAsync();
        }
        //[Route("momopayment")]
        //[HttpPost]
        //public async Task<IActionResult> MomoPayment()
        //{
        //    var companysession = HttpContext.Session.GetObject<CompanyBillingPolicy>("companyBilling");
        //    double amount1 = companysession.Amount;

        //    string endpoint = "https://test-payment.momo.vn/v2/gateway/api/create";
        //    string partnerCode = "MOMOBKUN20180529";
        //    string accessKey = "klm05TvNBzhg7h7j";
        //    string secretKey = "at67qH6mk8w5Y1nAyMoYKMWACiEi2bsa";
        //    string orderInfo = "Pay via MoMo";
        //    string orderId = DateTimeOffset.Now.ToUnixTimeSeconds().ToString();
        //    string redirectUrl = Url.Action("PaymentSuccess", "Payment", null, Request.Scheme);
        //    string ipnUrl = Url.Action("PaymentNotify", "Payment", null, Request.Scheme); // Updated to handle IPN correctly
        //    string extraData = "";
        //    string requestId = DateTimeOffset.Now.ToUnixTimeSeconds().ToString();
        //    string requestType = "payWithATM"; // captureWallet

        //    string rawHash = $"accessKey={accessKey}&amount={amount1.ToString("F0")}&extraData={extraData}&ipnUrl={ipnUrl}&orderId={orderId}&orderInfo={orderInfo}&partnerCode={partnerCode}&redirectUrl={redirectUrl}&requestId={requestId}&requestType={requestType}";
        //    string signature;

        //    using (HMACSHA256 hmac = new HMACSHA256(Encoding.UTF8.GetBytes(secretKey)))
        //    {
        //        byte[] hashBytes = hmac.ComputeHash(Encoding.UTF8.GetBytes(rawHash));
        //        signature = BitConverter.ToString(hashBytes).Replace("-", "").ToLower();
        //    }

        //    var data = new
        //    {
        //        partnerCode,
        //        partnerName = "Test",
        //        storeId = "MomoTestStore",
        //        requestId,
        //        amount = amount1.ToString("F0"),
        //        orderId,
        //        orderInfo,
        //        redirectUrl,
        //        ipnUrl,
        //        lang = "vi",
        //        extraData,
        //        requestType,
        //        signature
        //    };

        //    string jsonData = JsonConvert.SerializeObject(data);
        //    string result = await ExecPostRequest(endpoint, jsonData);
        //    var jsonResult = JsonConvert.DeserializeObject<Dictionary<string, string>>(result);

        //    foreach (var key in jsonResult.Keys)
        //    {
        //        Log.Information($"{key}: {jsonResult[key]}");
        //    }

        //    if (jsonResult.ContainsKey("payUrl"))
        //    {
        //        return Redirect(jsonResult["payUrl"]);
        //    }
        //    else
        //    {
        //        Log.Error("payUrl key not found in MoMo API response.");
        //        TempData["error"] = "Unable to process payment. Please try again.";
        //        return RedirectToAction("PaymentFail");
        //    }
        //}

        [Route("paymentconfirm")]
        [HttpGet]
        public IActionResult PaymentConfirm()
        {
            // Handle the payment confirmation
            return View();
        }
        //[Route("paymentnotify")]
        //[HttpPost]
        //public async Task<IActionResult> PaymentNotify()
        //{
        //    var form = await Request.ReadFormAsync();
        //    var resultCode = form["resultCode"];
        //    var orderId = form["orderId"];
        //    var requestId = form["requestId"];
        //    var transId = form["transId"];
        //    var message = form["message"];

        //    Log.Information($"MoMo Payment Notify - orderId: {orderId}, resultCode: {resultCode}, message: {message}");

        //    if (resultCode == "0") // Payment success
        //    {
        //        await SavePaymentDataAsync();
        //        return Ok();
        //    }
        //    else
        //    {
        //        Log.Error($"Payment failed with resultCode: {resultCode}, message: {message}");
        //        return BadRequest();
        //    }
        //}

        //[HttpPost]
        //public async Task<IActionResult> MomoPayment()
        //{
        //    // Retrieve the session data
        //    var companySession = HttpContext.Session.GetObject<CompanyBillingPolicy>("companyBilling");

        //    // Use the payment service to initiate the payment
        //    string payUrl = await _paymentService.InitiatePayment(
        //        companySession.Amount,
        //        Url.Action("PaymentSuccess", "Payment", new { paymentMethod = "MoMo" }, Request.Scheme),
        //        Url.Action("PaymentNotify", "Payment", null, Request.Scheme)    // The IPN URL for payment notification
        //    );

        //    // Redirect the user to the MoMo payment URL
        //    return Redirect(payUrl);
        //}
        [HttpPost]
        public async Task<IActionResult> MomoPayment()
        {
            var companySession = HttpContext.Session.GetObject<CompanyBillingPolicy>("companyBilling");
            string payUrl = await _paymentService.InitiatePayment(companySession.Amount, Url.Action("PaymentSuccess", "Payment", new { paymentMethod = "MoMo" }, Request.Scheme), Url.Action("PaymentNotify", "Payment", null, Request.Scheme));
            return Redirect(payUrl);
        }

        [Route("PaymentNotify")]
        [HttpPost]
        public async Task<IActionResult> PaymentNotify()
        {
            var form = await Request.ReadFormAsync();
            var resultCode = form["resultCode"];
            var transactionId = form["transId"];

            Log.Information($"Received PaymentNotify - transactionId: {transactionId}, resultCode: {resultCode}");

            if (await _paymentService.ConfirmPayment(transactionId, resultCode))
            {
                return Ok();
            }
            return BadRequest();
        }
        //[Route("paypalpayment")]
        [HttpGet]
        public async Task<IActionResult> PaymentWithPayPal()
        {
            APIContext apiContext = PayPalConfiguration.GetAPIContext();

            try
            {
                string payerId = Request.Query["PayerID"];
                if (string.IsNullOrEmpty(payerId))
                {
                    string baseURI = $"{Request.Scheme}://{Request.Host}{Request.PathBase}/Payment/PaymentWithPayPal?";
                    var guid = Convert.ToString((new Random()).Next(100000));
                    var createdPayment = CreatePayment(apiContext, $"{baseURI}guid={guid}");

                    var links = createdPayment.links.GetEnumerator();
                    string paypalRedirectUrl = null;
                    while (links.MoveNext())
                    {
                        Links lnk = links.Current;
                        if (lnk.rel.ToLower().Trim().Equals("approval_url"))
                        {
                            paypalRedirectUrl = lnk.href;
                        }
                    }

                    HttpContext.Session.SetString("PaymentID", createdPayment.id);
                    return Redirect(paypalRedirectUrl);
                }
                else
                {
                    var paymentId = HttpContext.Session.GetString("PaymentID");
                    var executedPayment = ExecutePayment(apiContext, payerId, paymentId);

                    if (executedPayment.state.ToLower() != "approved")
                    {
                        return View("PaymentFail");
                    }
                    // If payment is successful, update the status of the billing policy and save data
                    //await SavePaymentDataAsync("PayPal");

                    // Redirect to the PaymentSuccess action
                    return RedirectToAction("PaymentSuccess", new { paymentMethod = "PayPal" });
                }
            }
            catch (Exception ex)
            {
                return View("PaymentFail");
            }
        }

        private Payment ExecutePayment(APIContext apiContext, string payerId, string paymentId)
        {
            var paymentExecution = new PaymentExecution() { payer_id = payerId };
            var payment = new Payment() { id = paymentId };
            return payment.Execute(apiContext, paymentExecution);
        }

        private Payment CreatePayment(APIContext apiContext, string redirectUrl)
        {
            var itemList = new ItemList() { items = new List<Item>() };

            string amountString = HttpContext.Session.GetString("Amount");
            var amountValue = decimal.Parse(amountString);

            itemList.items.Add(new Item()
            {
                name = "Insurance Payment",
                currency = "USD",
                price = amountValue.ToString(CultureInfo.InvariantCulture),
                quantity = "1",
                sku = "insurance_payment"
            });

            var payer = new Payer() { payment_method = "paypal" };

            var redirUrls = new RedirectUrls()
            {
                cancel_url = redirectUrl + "&Cancel=true",
                return_url = redirectUrl
            };

            var details = new Details()
            {
                tax = "0",
                shipping = "0",
                subtotal = amountValue.ToString(CultureInfo.InvariantCulture)
            };

            var amount = new Amount()
            {
                currency = "USD",
                total = amountValue.ToString(CultureInfo.InvariantCulture),
                details = details
            };

            var transactionList = new List<Transaction>
    {
        new Transaction()
        {
            description = "Insurance Payment",
            invoice_number = DateTime.Now.Ticks.ToString(),
            amount = amount,
            item_list = itemList
        }
    };

            var payment = new Payment()
            {
                intent = "sale",
                payer = payer,
                transactions = transactionList,
                redirect_urls = redirUrls
            };

            return payment.Create(apiContext);
        }
    }
}

